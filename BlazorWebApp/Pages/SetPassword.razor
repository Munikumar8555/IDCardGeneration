@page "/set-password/{token}"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using BlazorWebApp.Data
@using BlazorWebApp.Shared
@inject IdDetailsDbContext DbContext
@inject NavigationManager Navigation
<h3 class="text-center mb-4">Set Password</h3>
<div class="container-fluid d-flex justify-content-center align-items-center" style=" margin-right: 300px
    ;">

<EditForm Model="passwordModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label class="form-label">New Password</label>
        <InputText type="password" class="form-control" @bind-Value="passwordModel.Password" />
        <ValidationMessage For="@(() => passwordModel.Password)" />
    </div>
    <div class="mb-3">
        <label class="form-label">Confirm Password</label>
        <InputText type="password" class="form-control" @bind-Value="passwordModel.ConfirmPassword" />
        <ValidationMessage For="@(() => passwordModel.ConfirmPassword)" />
    </div>
    <button type="submit" class="btn btn-primary w-100">Set Password</button>
</EditForm>
</div>

<Toast Show="showToast" Message="@toastMessage" ToastType="@toastType" />

@if (passwordSet)
{
    <div class="alert alert-success mt-3">Your password has been set successfully! Redirecting to login...</div>
}
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">@errorMessage</div>
}

@code {
    [Parameter]
    public string token { get; set; }
    private PasswordModel passwordModel = new PasswordModel();
    private bool passwordSet = false;
    private string errorMessage;
    private bool showToast = false;
    private string toastMessage = string.Empty;
    private string toastType = "success";

    private async Task HandleValidSubmit()
    {
        try
        {
            var user = DbContext.Registrations.FirstOrDefault(u => u.VerificationToken == token);
            if (user == null)
            {
                toastMessage = "Invalid or expired token.";
                toastType = "error";
                showToast = true;
                StateHasChanged();
                await Task.Delay(3000);
                showToast = false;
                StateHasChanged();
                return;
            }
            user.PasswordHash = BCrypt.Net.BCrypt.HashPassword(passwordModel.Password);
            user.EmailVerified = true;
            await DbContext.SaveChangesAsync();
            passwordSet = true;
            errorMessage = null;
            toastMessage = "Password set successfully! Redirecting to login...";
            toastType = "success";
            showToast = true;
            StateHasChanged();
            await Task.Delay(2000);
            showToast = false;
            StateHasChanged();
            Navigation.NavigateTo("/login", true);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            toastMessage = $"Failed to set password: {ex.Message}";
            toastType = "error";
            showToast = true;
            StateHasChanged();
            await Task.Delay(3000);
            showToast = false;
            StateHasChanged();
        }
    }

    public class PasswordModel
    {
        [Required]
        [MinLength(6)]
        public string Password { get; set; }
        [Required]
        [Compare("Password", ErrorMessage = "Passwords do not match.")]
        public string ConfirmPassword { get; set; }
    }
}
